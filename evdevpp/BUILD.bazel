load("@rules_python//python:defs.bzl", "py_binary")
load(":defs.bzl", "cc_dump_defines")
load("@bazel_cc_meta//cc_meta:cc_meta.bzl", "make_cc_meta_deviations", "refresh_cc_meta")

cc_library(
    name = "evdevpp",
    srcs = [
        "device.cc",
        "eventio.cc",
        "events.cc",
        "info.cc",
        "user_device.cc",
    ],
    hdrs = [
        "device.h",
        "eventio.h",
        "events.h",
        "info.h",
        "user_device.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":ecodes",
        "@libevdev",
        "@fmt",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/time",
        "@toolbelt//toolbelt",
    ],
)

py_binary(
    name = "genecodes",
    srcs = [
        "genecodes.py",
    ],
)

cc_dump_defines(
    name = "libevdev_defines",
    included_hdrs = [
        "linux/input.h",
        "linux/uinput.h",
    ],
    deps = ["@libevdev"],
)

genrule(
    name = "ecodes_gen",
    srcs = [
        ":libevdev_defines",
    ],
    outs = [
        "ecodes.h",
        "ecodes.cc",
    ],
    cmd = "$(location :genecodes) $(locations :libevdev_defines) $(location ecodes.h) $(location ecodes.cc)",
    tools = [":genecodes"],
)

cc_library(
    name = "ecodes",
    srcs = [
        ":ecodes_gen",
    ],
    hdrs = [
        ":ecodes_gen",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/container:flat_hash_map",
    ],
)

make_cc_meta_deviations(
    name = "evdevpp_cc_meta_deviations",
    deviations = {
        "@libevdev": {
            "alwaysused": True,
            "forward_exports": True,
        },
    },
    visibility = ["//visibility:public"],
)

refresh_cc_meta(
    name = "refresh_all",
    cc_meta_aspect = "//evdevpp:defs.bzl%evdevpp_cc_meta_aspect",
    visibility = ["//visibility:public"],
)
